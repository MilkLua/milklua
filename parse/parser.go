// Code generated by goyacc -o parse/parser.go parse/parser.go.y. DO NOT EDIT.

//line parse/parser.go.y:2
package parse

import __yyfmt__ "fmt"

//line parse/parser.go.y:2

import (
	"fmt"
	"milklua/ast"
)

//line parse/parser.go.y:36
type yySymType struct {
	yys   int
	token ast.Token

	stmts []ast.Stmt
	stmt  ast.Stmt

	funcname *ast.FuncName
	funcexpr *ast.FunctionExpr

	exprlist []ast.Expr
	expr     ast.Expr

	fieldlist []*ast.Field
	field     *ast.Field
	fieldsep  string

	namelist []string
	parlist  *ast.ParList
}

const TAnd = 57346
const TBreak = 57347
const TElse = 57348
const TElseIf = 57349
const TFalse = 57350
const TFor = 57351
const TFunction = 57352
const TIf = 57353
const TIn = 57354
const TLocal = 57355
const TNil = 57356
const TNot = 57357
const TOr = 57358
const TReturn = 57359
const TRepeat = 57360
const TTrue = 57361
const TUntil = 57362
const TWhile = 57363
const TGoto = 57364
const TIfThru = 57365
const TEqeq = 57366
const TNeq = 57367
const TLte = 57368
const TGte = 57369
const T2Dot = 57370
const T3Dot = 57371
const TDot = 57372
const T2Colon = 57373
const TIdent = 57374
const TNumber = 57375
const TString = 57376
const TLBrace = 57377
const TRBrace = 57378
const TLParen = 57379
const TRParen = 57380
const TLBracket = 57381
const TRBracket = 57382
const TComma = 57383
const TSemi = 57384
const TAssign = 57385
const TAdd = 57386
const TSub = 57387
const TMul = 57388
const TDiv = 57389
const TMod = 57390
const TPow = 57391
const TColon = 57392
const THash = 57393
const TLeftShift = 57394
const TRightShift = 57395
const TBitAnd = 57396
const TBitOr = 57397
const TAddAssign = 57398
const TSubAssign = 57399
const TMulAssign = 57400
const TDivAssign = 57401
const TModAssign = 57402
const TPowAssign = 57403
const TDotLParen = 57404
const TTBool = 57405
const TTNumber = 57406
const TTString = 57407
const TTTable = 57408
const TTFunction = 57409
const TTUserdata = 57410
const TTThread = 57411
const TTChannel = 57412
const TGt = 57413
const TLt = 57414
const UNARY = 57415

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"TAnd",
	"TBreak",
	"TElse",
	"TElseIf",
	"TFalse",
	"TFor",
	"TFunction",
	"TIf",
	"TIn",
	"TLocal",
	"TNil",
	"TNot",
	"TOr",
	"TReturn",
	"TRepeat",
	"TTrue",
	"TUntil",
	"TWhile",
	"TGoto",
	"TIfThru",
	"TEqeq",
	"TNeq",
	"TLte",
	"TGte",
	"T2Dot",
	"T3Dot",
	"TDot",
	"T2Colon",
	"TIdent",
	"TNumber",
	"TString",
	"TLBrace",
	"TRBrace",
	"TLParen",
	"TRParen",
	"TLBracket",
	"TRBracket",
	"TComma",
	"TSemi",
	"TAssign",
	"TAdd",
	"TSub",
	"TMul",
	"TDiv",
	"TMod",
	"TPow",
	"TColon",
	"THash",
	"TLeftShift",
	"TRightShift",
	"TBitAnd",
	"TBitOr",
	"TAddAssign",
	"TSubAssign",
	"TMulAssign",
	"TDivAssign",
	"TModAssign",
	"TPowAssign",
	"TDotLParen",
	"TTBool",
	"TTNumber",
	"TTString",
	"TTTable",
	"TTFunction",
	"TTUserdata",
	"TTThread",
	"TTChannel",
	"TGt",
	"TLt",
	"UNARY",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parse/parser.go.y:630

func TokenName(c int) string {
	if c >= TAnd && c-TAnd < len(yyToknames) {
		if yyToknames[c-TAnd] != "" {
			return yyToknames[c-TAnd]
		}
	}
	return string([]byte{byte(c)})
}

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 8,
	41, 44,
	43, 44,
	-2, 94,
	-1, 33,
	30, 96,
	39, 96,
	50, 96,
	-2, 66,
	-1, 113,
	41, 45,
	43, 45,
	-2, 94,
	-1, 197,
	6, 35,
	7, 35,
	-2, 16,
}

const yyPrivate = 57344

const yyLast = 928

var yyAct = [...]uint8{
	27, 102, 65, 26, 54, 57, 63, 44, 45, 46,
	47, 48, 49, 59, 4, 61, 161, 162, 163, 164,
	165, 166, 167, 168, 70, 74, 92, 93, 94, 95,
	95, 130, 127, 51, 136, 50, 203, 173, 97, 98,
	99, 125, 96, 96, 105, 106, 107, 108, 109, 110,
	111, 129, 33, 115, 112, 22, 34, 169, 41, 10,
	119, 8, 171, 172, 199, 177, 122, 128, 76, 126,
	76, 191, 25, 76, 134, 188, 124, 140, 141, 142,
	143, 144, 145, 146, 147, 148, 149, 150, 151, 152,
	153, 154, 155, 156, 157, 158, 159, 133, 127, 186,
	71, 139, 68, 67, 22, 174, 132, 67, 114, 56,
	113, 78, 241, 238, 22, 235, 234, 232, 10, 40,
	8, 227, 176, 77, 224, 216, 181, 178, 215, 180,
	182, 87, 88, 86, 85, 89, 209, 197, 189, 195,
	190, 20, 213, 137, 179, 239, 24, 120, 214, 233,
	226, 90, 91, 92, 93, 94, 95, 217, 200, 81,
	82, 80, 79, 187, 89, 60, 185, 202, 196, 96,
	183, 105, 192, 69, 193, 184, 183, 135, 83, 84,
	90, 91, 92, 93, 94, 95, 117, 53, 81, 82,
	80, 79, 116, 201, 56, 71, 52, 204, 96, 206,
	73, 72, 62, 23, 210, 207, 208, 55, 237, 229,
	221, 211, 212, 218, 170, 220, 58, 1, 101, 219,
	36, 131, 21, 222, 35, 160, 9, 66, 75, 228,
	64, 230, 231, 3, 205, 78, 2, 0, 0, 236,
	15, 16, 14, 0, 17, 240, 0, 77, 0, 13,
	0, 0, 12, 19, 0, 87, 88, 86, 85, 89,
	0, 0, 18, 20, 0, 0, 123, 0, 24, 0,
	0, 0, 0, 0, 0, 90, 91, 92, 93, 94,
	95, 0, 0, 81, 82, 80, 79, 78, 0, 0,
	0, 0, 0, 96, 0, 0, 0, 0, 0, 77,
	0, 0, 83, 84, 0, 0, 0, 87, 88, 86,
	85, 89, 0, 0, 0, 0, 0, 0, 225, 0,
	0, 0, 0, 0, 0, 0, 0, 90, 91, 92,
	93, 94, 95, 0, 0, 81, 82, 80, 79, 78,
	0, 0, 0, 0, 0, 96, 0, 0, 0, 0,
	0, 77, 0, 0, 83, 84, 0, 0, 0, 87,
	88, 86, 85, 89, 0, 0, 0, 0, 0, 0,
	223, 0, 0, 0, 0, 0, 0, 0, 0, 90,
	91, 92, 93, 94, 95, 0, 0, 81, 82, 80,
	79, 78, 0, 0, 0, 0, 0, 96, 0, 0,
	0, 0, 0, 77, 89, 0, 83, 84, 0, 0,
	0, 87, 88, 86, 85, 89, 0, 0, 0, 0,
	90, 91, 92, 93, 94, 95, 0, 0, 198, 0,
	0, 90, 91, 92, 93, 94, 95, 0, 96, 81,
	82, 80, 79, 78, 0, 0, 0, 0, 0, 96,
	0, 0, 0, 0, 0, 77, 89, 0, 83, 84,
	0, 0, 0, 87, 88, 86, 85, 89, 0, 0,
	0, 0, 90, 91, 92, 93, 94, 95, 0, 194,
	81, 82, 80, 90, 91, 92, 93, 94, 95, 0,
	96, 81, 82, 80, 79, 78, 0, 0, 0, 0,
	0, 96, 0, 0, 0, 0, 0, 77, 89, 0,
	83, 84, 0, 0, 0, 87, 88, 86, 85, 89,
	0, 0, 0, 0, 90, 91, 92, 93, 94, 95,
	0, 175, 81, 82, 0, 90, 91, 92, 93, 94,
	95, 0, 96, 81, 82, 80, 79, 78, 0, 0,
	0, 0, 0, 96, 0, 0, 0, 0, 0, 77,
	0, 0, 83, 84, 0, 0, 0, 87, 88, 86,
	85, 89, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 138, 0, 0, 0, 0, 0, 90, 91, 92,
	93, 94, 95, 0, 0, 81, 82, 80, 79, 78,
	0, 0, 0, 0, 0, 96, 0, 0, 0, 0,
	0, 77, 0, 0, 83, 84, 0, 0, 0, 87,
	88, 86, 85, 89, 0, 0, 0, 0, 0, 0,
	121, 0, 0, 0, 0, 0, 0, 0, 0, 90,
	91, 92, 93, 94, 95, 0, 0, 81, 82, 80,
	79, 78, 0, 0, 0, 0, 0, 96, 0, 0,
	0, 0, 0, 77, 0, 0, 83, 84, 0, 0,
	0, 87, 88, 86, 85, 89, 0, 0, 0, 0,
	0, 0, 0, 78, 0, 0, 0, 0, 0, 0,
	0, 90, 91, 92, 93, 94, 95, 0, 0, 81,
	82, 80, 79, 87, 88, 86, 85, 89, 0, 96,
	0, 0, 0, 0, 0, 0, 0, 0, 83, 84,
	0, 0, 0, 90, 91, 92, 93, 94, 95, 0,
	0, 81, 82, 80, 79, 87, 88, 86, 85, 89,
	0, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	83, 84, 0, 0, 0, 90, 91, 92, 93, 94,
	95, 0, 0, 81, 82, 80, 79, 0, 29, 0,
	40, 0, 0, 96, 28, 38, 0, 0, 0, 30,
	0, 0, 83, 84, 0, 0, 0, 0, 0, 32,
	0, 0, 103, 31, 42, 43, 100, 24, 0, 104,
	0, 29, 0, 40, 0, 37, 0, 28, 38, 0,
	0, 39, 30, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 32, 0, 0, 103, 31, 42, 43, 29,
	24, 40, 104, 0, 0, 28, 38, 0, 37, 0,
	30, 0, 0, 0, 39, 0, 0, 0, 0, 0,
	32, 0, 0, 20, 31, 42, 43, 0, 24, 118,
	0, 0, 29, 0, 40, 0, 37, 0, 28, 38,
	0, 0, 39, 30, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 32, 0, 0, 20, 31, 42, 43,
	7, 24, 0, 0, 15, 16, 14, 0, 17, 37,
	0, 0, 6, 13, 0, 39, 12, 19, 0, 0,
	0, 0, 0, 0, 0, 0, 18, 20, 0, 0,
	11, 0, 24, 0, 0, 0, 0, 5,
}

var yyPact = [...]int16{
	-1000, -1000, 885, 30, -1000, -1000, 854, -1000, -49, -8,
	157, -1000, 854, 130, 854, 170, 70, 163, 169, 168,
	-1000, -1000, -1000, -1000, 854, -1000, 32, 647, -1000, -1000,
	-1000, -1000, -1000, -1000, 157, -1000, -1000, 854, 854, 854,
	66, -1000, -1000, 760, 854, 854, 854, 854, 854, 854,
	854, 109, 854, 160, -1000, 154, 821, 111, -1000, 595,
	-1000, 231, -2, 57, 66, -1000, 1, 68, -1000, 145,
	-9, -1000, 112, -1000, 543, 63, 854, 854, 854, 854,
	854, 854, 854, 854, 854, 854, 854, 854, 854, 854,
	854, 854, 854, 854, 854, 854, -47, -19, -19, -19,
	-1000, 21, -1000, -6, 854, 647, 647, 647, 647, 647,
	647, 647, 32, -1000, 157, 491, -1000, 72, -1000, 27,
	-1000, -1000, 108, -1000, -1000, 854, 854, 144, -1000, 143,
	134, 61, 128, -1000, 34, 66, 854, -1000, -1000, -1000,
	647, 679, 711, 428, 480, 376, 376, 136, 136, 136,
	136, 136, 136, 376, -20, -20, -19, -19, -19, -19,
	33, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	793, -1000, -1000, 854, 439, -1000, -1000, -1000, 103, 148,
	101, 387, 29, -1000, -1000, -1000, 123, -1000, 138, -1000,
	32, -1000, -1000, 647, -7, -1000, 854, -1000, 854, -1000,
	-1000, 100, -1000, 854, 647, 205, 107, 92, 89, -1000,
	647, 122, 854, -1000, 854, 187, -1000, -1000, 335, 88,
	283, 115, 85, -1000, 186, -1000, -1000, -1000, 81, 114,
	80, 79, -1000, -1000, 185, -1000, 77, 110, -1000, -1000,
	76, -1000,
}

var yyPgo = [...]uint8{
	0, 216, 236, 5, 14, 234, 233, 230, 227, 226,
	58, 6, 3, 0, 225, 224, 56, 203, 222, 4,
	52, 2, 221, 220, 218, 1, 214,
}

var yyR1 = [...]int8{
	0, 1, 1, 1, 2, 2, 2, 3, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 5, 5, 6, 6, 6,
	7, 7, 8, 8, 9, 9, 10, 10, 10, 11,
	11, 12, 12, 14, 14, 14, 14, 14, 14, 14,
	14, 13, 13, 13, 13, 13, 13, 13, 13, 13,
	13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
	13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
	13, 13, 13, 15, 16, 16, 16, 16, 16, 18,
	17, 17, 19, 19, 20, 21, 21, 22, 22, 22,
	23, 23, 24, 24, 24, 25, 25, 25, 26, 26,
}

var yyR2 = [...]int8{
	0, 1, 2, 3, 0, 2, 2, 1, 3, 3,
	3, 3, 3, 3, 3, 1, 3, 5, 6, 5,
	3, 6, 10, 13, 9, 15, 11, 11, 7, 3,
	4, 4, 2, 3, 2, 0, 6, 1, 2, 1,
	1, 3, 1, 3, 1, 3, 1, 4, 3, 1,
	3, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 2, 4, 1, 1, 1, 1, 1, 3, 3,
	2, 4, 2, 3, 2, 6, 5, 1, 1, 3,
	2, 3, 1, 3, 2, 3, 5, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -1, -2, -6, -4, 42, 17, 5, -10, -9,
	-16, 35, 21, 18, 11, 9, 10, 13, 31, 22,
	32, -18, -20, -17, 37, 42, -12, -13, 14, 8,
	19, 33, 29, -20, -16, -15, -23, 45, 15, 51,
	10, -10, 34, 35, 56, 57, 58, 59, 60, 61,
	43, 41, 39, 30, -19, 50, 37, -3, -1, -13,
	35, -13, 32, -11, -7, -21, -8, 37, 32, 10,
	-11, 32, 32, 32, -13, -17, 41, 16, 4, 55,
	54, 52, 53, 71, 72, 27, 26, 24, 25, 28,
	44, 45, 46, 47, 48, 49, 62, -13, -13, -13,
	36, -24, -25, 32, 39, -13, -13, -13, -13, -13,
	-13, -13, -12, -10, -16, -13, 32, 32, 38, -12,
	36, 35, -3, 35, -4, 43, 12, 41, -21, 50,
	30, -22, 38, 29, -11, 32, 43, 31, 38, 38,
	-13, -13, -13, -13, -13, -13, -13, -13, -13, -13,
	-13, -13, -13, -13, -13, -13, -13, -13, -13, -13,
	-14, 63, 64, 65, 66, 67, 68, 69, 70, 36,
	-26, 41, 42, 43, -13, 40, -19, 38, -3, 36,
	-3, -13, -12, 32, 32, 32, 38, 35, 41, -21,
	-12, 38, -25, -13, 40, 36, 20, 36, 41, 35,
	35, -3, 29, 43, -13, -5, -13, -3, -3, 36,
	-13, 6, 7, 35, 41, 36, 36, 35, -13, -3,
	-13, 23, -3, 35, 36, 35, 35, 36, -3, 23,
	-3, -3, 36, 35, 36, 36, -3, 23, 36, 35,
	-3, 36,
}

var yyDef = [...]int8{
	4, -2, 1, 2, 5, 6, 37, 39, -2, 0,
	15, 4, 0, 0, 0, 0, 0, 0, 0, 0,
	46, 95, 96, 97, 0, 3, 38, 51, 61, 62,
	63, 64, 65, -2, 67, 68, 69, 0, 0, 0,
	0, 94, 93, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 100, 0, 0, 0, 7, 0,
	4, 0, 49, 0, 0, 104, 40, 0, 42, 0,
	32, 49, 0, 34, 0, 97, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 89, 90, 91,
	110, 0, 112, 46, 0, 117, 8, 9, 10, 11,
	12, 13, 14, -2, 0, 0, 48, 0, 102, 0,
	16, 4, 0, 4, 20, 0, 0, 0, 29, 0,
	0, 0, 0, 107, 108, 0, 0, 33, 98, 99,
	52, 70, 71, 72, 73, 74, 75, 76, 77, 78,
	79, 80, 81, 82, 83, 84, 85, 86, 87, 88,
	0, 53, 54, 55, 56, 57, 58, 59, 60, 111,
	114, 118, 119, 0, 0, 47, 101, 103, 0, 0,
	0, 0, 0, 50, 41, 43, 0, 4, 0, 30,
	31, 92, 113, 115, 0, 17, 0, -2, 0, 4,
	4, 0, 109, 0, 18, 21, 0, 0, 0, 106,
	116, 0, 0, 4, 0, 28, 105, 4, 0, 0,
	0, 0, 0, 4, 24, 4, 4, 22, 0, 0,
	0, 0, 36, 4, 26, 27, 0, 0, 23, 4,
	0, 25,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse/parser.go.y:82
		{
			yyVAL.stmts = yyDollar[1].stmts
			if l, ok := yylex.(*Lexer); ok {
				l.Stmts = yyVAL.stmts
			}
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse/parser.go.y:88
		{
			yyVAL.stmts = append(yyDollar[1].stmts, yyDollar[2].stmt)
			if l, ok := yylex.(*Lexer); ok {
				l.Stmts = yyVAL.stmts
			}
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse/parser.go.y:94
		{
			yyVAL.stmts = append(yyDollar[1].stmts, yyDollar[2].stmt)
			if l, ok := yylex.(*Lexer); ok {
				l.Stmts = yyVAL.stmts
			}
		}
	case 4:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parse/parser.go.y:102
		{
			yyVAL.stmts = []ast.Stmt{}
		}
	case 5:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse/parser.go.y:105
		{
			yyVAL.stmts = append(yyDollar[1].stmts, yyDollar[2].stmt)
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse/parser.go.y:108
		{
			yyVAL.stmts = yyDollar[1].stmts
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse/parser.go.y:113
		{
			yyVAL.stmts = yyDollar[1].stmts
		}
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse/parser.go.y:118
		{
			yyVAL.stmt = &ast.CompoundAssignStmt{Lhs: yyDollar[1].expr, Operator: "+=", Rhs: yyDollar[3].expr}
			yyVAL.stmt.SetLine(yyDollar[1].expr.Line())
		}
	case 9:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse/parser.go.y:122
		{
			yyVAL.stmt = &ast.CompoundAssignStmt{Lhs: yyDollar[1].expr, Operator: "-=", Rhs: yyDollar[3].expr}
			yyVAL.stmt.SetLine(yyDollar[1].expr.Line())
		}
	case 10:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse/parser.go.y:126
		{
			yyVAL.stmt = &ast.CompoundAssignStmt{Lhs: yyDollar[1].expr, Operator: "*=", Rhs: yyDollar[3].expr}
			yyVAL.stmt.SetLine(yyDollar[1].expr.Line())
		}
	case 11:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse/parser.go.y:130
		{
			yyVAL.stmt = &ast.CompoundAssignStmt{Lhs: yyDollar[1].expr, Operator: "/=", Rhs: yyDollar[3].expr}
			yyVAL.stmt.SetLine(yyDollar[1].expr.Line())
		}
	case 12:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse/parser.go.y:134
		{
			yyVAL.stmt = &ast.CompoundAssignStmt{Lhs: yyDollar[1].expr, Operator: "%=", Rhs: yyDollar[3].expr}
			yyVAL.stmt.SetLine(yyDollar[1].expr.Line())
		}
	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse/parser.go.y:138
		{
			yyVAL.stmt = &ast.CompoundAssignStmt{Lhs: yyDollar[1].expr, Operator: "^=", Rhs: yyDollar[3].expr}
			yyVAL.stmt.SetLine(yyDollar[1].expr.Line())
		}
	case 14:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse/parser.go.y:142
		{
			yyVAL.stmt = &ast.AssignStmt{Lhs: yyDollar[1].exprlist, Rhs: yyDollar[3].exprlist}
			yyVAL.stmt.SetLine(yyDollar[1].exprlist[0].Line())
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse/parser.go.y:147
		{
			if _, ok := yyDollar[1].expr.(*ast.FuncCallExpr); !ok {
				yylex.(*Lexer).Error(fmt.Sprintf("parse error: unexpected %s", yyDollar[1].expr))
			} else {
				yyVAL.stmt = &ast.FuncCallStmt{Expr: yyDollar[1].expr}
				yyVAL.stmt.SetLine(yyDollar[1].expr.Line())
			}
		}
	case 16:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse/parser.go.y:155
		{
			yyVAL.stmt = &ast.DoBlockStmt{Stmts: yyDollar[2].stmts}
			yyVAL.stmt.SetLine(yyDollar[1].token.Pos.Line)
			yyVAL.stmt.SetLastLine(yyDollar[3].token.Pos.Line)
		}
	case 17:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parse/parser.go.y:160
		{
			yyVAL.stmt = &ast.WhileStmt{Condition: yyDollar[2].expr, Stmts: yyDollar[4].stmts}
			yyVAL.stmt.SetLine(yyDollar[1].token.Pos.Line)
			yyVAL.stmt.SetLastLine(yyDollar[5].token.Pos.Line)
		}
	case 18:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parse/parser.go.y:165
		{
			yyVAL.stmt = &ast.RepeatStmt{Condition: yyDollar[6].expr, Stmts: yyDollar[3].stmts}
			yyVAL.stmt.SetLine(yyDollar[1].token.Pos.Line)
			yyVAL.stmt.SetLastLine(yyDollar[6].expr.Line())
		}
	case 19:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parse/parser.go.y:170
		{
			yyVAL.stmt = &ast.IfStmt{Condition: yyDollar[2].expr, Then: yyDollar[4].stmts}
			yyVAL.stmt.SetLine(yyDollar[1].token.Pos.Line)
			yyVAL.stmt.SetLastLine(yyDollar[5].token.Pos.Line)
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse/parser.go.y:175
		{ // single line if
			yyVAL.stmt = &ast.IfStmt{Condition: yyDollar[2].expr, Then: []ast.Stmt{yyDollar[3].stmt}}
			yyVAL.stmt.SetLine(yyDollar[1].token.Pos.Line)
			yyVAL.stmt.SetLastLine(yyDollar[3].stmt.Line())
		}
	case 21:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parse/parser.go.y:180
		{
			yyVAL.stmt = &ast.IfStmt{Condition: yyDollar[2].expr, Then: yyDollar[4].stmts}
			cur := yyVAL.stmt
			for _, elseif := range yyDollar[6].stmts {
				cur.(*ast.IfStmt).Else = []ast.Stmt{elseif}
				cur = elseif
			}
			yyVAL.stmt.SetLine(yyDollar[1].token.Pos.Line)
			/*$$.SetLastLine($6.Pos.Line)*/
		}
	case 22:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parse/parser.go.y:190
		{
			yyVAL.stmt = &ast.IfStmt{Condition: yyDollar[2].expr, Then: yyDollar[4].stmts}
			cur := yyVAL.stmt
			for _, elseif := range yyDollar[6].stmts {
				cur.(*ast.IfStmt).Else = []ast.Stmt{elseif}
				cur = elseif
			}
			cur.(*ast.IfStmt).Else = yyDollar[9].stmts
			yyVAL.stmt.SetLine(yyDollar[1].token.Pos.Line)
			yyVAL.stmt.SetLastLine(yyDollar[10].token.Pos.Line)
		}
	case 23:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parse/parser.go.y:201
		{
			yyVAL.stmt = &ast.NumberForStmtWithIfThru{Name: yyDollar[2].token.Str, Init: yyDollar[4].expr, Limit: yyDollar[6].expr, Stmts: yyDollar[8].stmts, IfThruStmts: yyDollar[12].stmts}
			yyVAL.stmt.SetLine(yyDollar[1].token.Pos.Line)
			yyVAL.stmt.SetLastLine(yyDollar[13].token.Pos.Line)
		}
	case 24:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parse/parser.go.y:206
		{
			yyVAL.stmt = &ast.NumberForStmt{Name: yyDollar[2].token.Str, Init: yyDollar[4].expr, Limit: yyDollar[6].expr, Stmts: yyDollar[8].stmts}
			yyVAL.stmt.SetLine(yyDollar[1].token.Pos.Line)
			yyVAL.stmt.SetLastLine(yyDollar[9].token.Pos.Line)
		}
	case 25:
		yyDollar = yyS[yypt-15 : yypt+1]
//line parse/parser.go.y:211
		{
			yyVAL.stmt = &ast.NumberForStmtWithIfThru{Name: yyDollar[2].token.Str, Init: yyDollar[4].expr, Limit: yyDollar[6].expr, Step: yyDollar[8].expr, Stmts: yyDollar[10].stmts, IfThruStmts: yyDollar[14].stmts}
			yyVAL.stmt.SetLine(yyDollar[1].token.Pos.Line)
			yyVAL.stmt.SetLastLine(yyDollar[15].token.Pos.Line)
		}
	case 26:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parse/parser.go.y:216
		{
			yyVAL.stmt = &ast.NumberForStmt{Name: yyDollar[2].token.Str, Init: yyDollar[4].expr, Limit: yyDollar[6].expr, Step: yyDollar[8].expr, Stmts: yyDollar[10].stmts}
			yyVAL.stmt.SetLine(yyDollar[1].token.Pos.Line)
			yyVAL.stmt.SetLastLine(yyDollar[11].token.Pos.Line)
		}
	case 27:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parse/parser.go.y:221
		{
			yyVAL.stmt = &ast.GenericForStmtWithIfThru{Names: yyDollar[2].namelist, Exprs: yyDollar[4].exprlist, Stmts: yyDollar[6].stmts, IfThruStmts: yyDollar[10].stmts}
			yyVAL.stmt.SetLine(yyDollar[1].token.Pos.Line)
			yyVAL.stmt.SetLastLine(yyDollar[11].token.Pos.Line)
		}
	case 28:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parse/parser.go.y:226
		{
			yyVAL.stmt = &ast.GenericForStmt{Names: yyDollar[2].namelist, Exprs: yyDollar[4].exprlist, Stmts: yyDollar[6].stmts}
			yyVAL.stmt.SetLine(yyDollar[1].token.Pos.Line)
			yyVAL.stmt.SetLastLine(yyDollar[7].token.Pos.Line)
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse/parser.go.y:231
		{
			yyVAL.stmt = &ast.FuncDefStmt{Name: yyDollar[2].funcname, Func: yyDollar[3].funcexpr}
			yyVAL.stmt.SetLine(yyDollar[1].token.Pos.Line)
			yyVAL.stmt.SetLastLine(yyDollar[3].funcexpr.LastLine())
		}
	case 30:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parse/parser.go.y:236
		{
			yyVAL.stmt = &ast.LocalAssignStmt{Names: []string{yyDollar[3].token.Str}, Exprs: []ast.Expr{yyDollar[4].funcexpr}}
			yyVAL.stmt.SetLine(yyDollar[1].token.Pos.Line)
			yyVAL.stmt.SetLastLine(yyDollar[4].funcexpr.LastLine())
		}
	case 31:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parse/parser.go.y:241
		{
			yyVAL.stmt = &ast.LocalAssignStmt{Names: yyDollar[2].namelist, Exprs: yyDollar[4].exprlist}
			yyVAL.stmt.SetLine(yyDollar[1].token.Pos.Line)
		}
	case 32:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse/parser.go.y:245
		{
			yyVAL.stmt = &ast.LocalAssignStmt{Names: yyDollar[2].namelist, Exprs: []ast.Expr{}}
			yyVAL.stmt.SetLine(yyDollar[1].token.Pos.Line)
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse/parser.go.y:249
		{
			yyVAL.stmt = &ast.LabelStmt{Name: yyDollar[2].token.Str}
			yyVAL.stmt.SetLine(yyDollar[1].token.Pos.Line)
		}
	case 34:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse/parser.go.y:253
		{
			yyVAL.stmt = &ast.GotoStmt{Label: yyDollar[2].token.Str}
			yyVAL.stmt.SetLine(yyDollar[1].token.Pos.Line)
		}
	case 35:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parse/parser.go.y:259
		{
			yyVAL.stmts = []ast.Stmt{}
		}
	case 36:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parse/parser.go.y:262
		{
			yyVAL.stmts = append(yyDollar[1].stmts, &ast.IfStmt{Condition: yyDollar[3].expr, Then: yyDollar[5].stmts})
			yyVAL.stmts[len(yyVAL.stmts)-1].SetLine(yyDollar[2].token.Pos.Line)
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse/parser.go.y:268
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: nil}
			yyVAL.stmt.SetLine(yyDollar[1].token.Pos.Line)
		}
	case 38:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse/parser.go.y:272
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyDollar[2].exprlist}
			yyVAL.stmt.SetLine(yyDollar[1].token.Pos.Line)
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse/parser.go.y:276
		{
			yyVAL.stmt = &ast.BreakStmt{}
			yyVAL.stmt.SetLine(yyDollar[1].token.Pos.Line)
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse/parser.go.y:282
		{
			yyVAL.funcname = yyDollar[1].funcname
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse/parser.go.y:285
		{
			yyVAL.funcname = &ast.FuncName{Func: nil, Receiver: yyDollar[1].funcname.Func, Method: yyDollar[3].token.Str}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse/parser.go.y:290
		{
			yyVAL.funcname = &ast.FuncName{Func: &ast.IdentExpr{Value: yyDollar[1].token.Str}}
			yyVAL.funcname.Func.SetLine(yyDollar[1].token.Pos.Line)
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse/parser.go.y:294
		{
			key := &ast.StringExpr{Value: yyDollar[3].token.Str}
			key.SetLine(yyDollar[3].token.Pos.Line)
			fn := &ast.AttrGetExpr{Object: yyDollar[1].funcname.Func, Key: key}
			fn.SetLine(yyDollar[3].token.Pos.Line)
			yyVAL.funcname = &ast.FuncName{Func: fn}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse/parser.go.y:303
		{
			yyVAL.exprlist = []ast.Expr{yyDollar[1].expr}
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse/parser.go.y:306
		{
			yyVAL.exprlist = append(yyDollar[1].exprlist, yyDollar[3].expr)
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse/parser.go.y:311
		{
			yyVAL.expr = &ast.IdentExpr{Value: yyDollar[1].token.Str}
			yyVAL.expr.SetLine(yyDollar[1].token.Pos.Line)
		}
	case 47:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parse/parser.go.y:315
		{
			yyVAL.expr = &ast.AttrGetExpr{Object: yyDollar[1].expr, Key: yyDollar[3].expr}
			yyVAL.expr.SetLine(yyDollar[1].expr.Line())
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse/parser.go.y:319
		{
			key := &ast.StringExpr{Value: yyDollar[3].token.Str}
			key.SetLine(yyDollar[3].token.Pos.Line)
			yyVAL.expr = &ast.AttrGetExpr{Object: yyDollar[1].expr, Key: key}
			yyVAL.expr.SetLine(yyDollar[1].expr.Line())
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse/parser.go.y:327
		{
			yyVAL.namelist = []string{yyDollar[1].token.Str}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse/parser.go.y:330
		{
			yyVAL.namelist = append(yyDollar[1].namelist, yyDollar[3].token.Str)
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse/parser.go.y:335
		{
			yyVAL.exprlist = []ast.Expr{yyDollar[1].expr}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse/parser.go.y:338
		{
			yyVAL.exprlist = append(yyDollar[1].exprlist, yyDollar[3].expr)
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse/parser.go.y:343
		{
			yyVAL.expr = makeBuiltinType(yyDollar[1].token)
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse/parser.go.y:346
		{
			yyVAL.expr = makeBuiltinType(yyDollar[1].token)
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse/parser.go.y:349
		{
			yyVAL.expr = makeBuiltinType(yyDollar[1].token)
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse/parser.go.y:352
		{
			yyVAL.expr = makeBuiltinType(yyDollar[1].token)
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse/parser.go.y:355
		{
			yyVAL.expr = makeBuiltinType(yyDollar[1].token)
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse/parser.go.y:358
		{
			yyVAL.expr = makeBuiltinType(yyDollar[1].token)
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse/parser.go.y:361
		{
			yyVAL.expr = makeBuiltinType(yyDollar[1].token)
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse/parser.go.y:364
		{
			yyVAL.expr = makeBuiltinType(yyDollar[1].token)
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse/parser.go.y:370
		{
			yyVAL.expr = &ast.NilExpr{}
			yyVAL.expr.SetLine(yyDollar[1].token.Pos.Line)
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse/parser.go.y:374
		{
			yyVAL.expr = &ast.FalseExpr{}
			yyVAL.expr.SetLine(yyDollar[1].token.Pos.Line)
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse/parser.go.y:378
		{
			yyVAL.expr = &ast.TrueExpr{}
			yyVAL.expr.SetLine(yyDollar[1].token.Pos.Line)
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse/parser.go.y:382
		{
			yyVAL.expr = &ast.NumberExpr{Value: yyDollar[1].token.Str}
			yyVAL.expr.SetLine(yyDollar[1].token.Pos.Line)
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse/parser.go.y:386
		{
			yyVAL.expr = &ast.Comma3Expr{}
			yyVAL.expr.SetLine(yyDollar[1].token.Pos.Line)
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse/parser.go.y:390
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse/parser.go.y:393
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse/parser.go.y:396
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse/parser.go.y:399
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse/parser.go.y:402
		{
			yyVAL.expr = &ast.LogicalOpExpr{Lhs: yyDollar[1].expr, Operator: "or", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetLine(yyDollar[1].expr.Line())
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse/parser.go.y:406
		{
			yyVAL.expr = &ast.LogicalOpExpr{Lhs: yyDollar[1].expr, Operator: "and", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetLine(yyDollar[1].expr.Line())
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse/parser.go.y:410
		{
			yyVAL.expr = &ast.BitwiseOpExpr{Lhs: yyDollar[1].expr, Operator: "|", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetLine(yyDollar[1].expr.Line())
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse/parser.go.y:414
		{
			yyVAL.expr = &ast.BitwiseOpExpr{Lhs: yyDollar[1].expr, Operator: "&", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetLine(yyDollar[1].expr.Line())
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse/parser.go.y:418
		{
			yyVAL.expr = &ast.BitwiseOpExpr{Lhs: yyDollar[1].expr, Operator: "<<", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetLine(yyDollar[1].expr.Line())
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse/parser.go.y:422
		{
			yyVAL.expr = &ast.BitwiseOpExpr{Lhs: yyDollar[1].expr, Operator: ">>", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetLine(yyDollar[1].expr.Line())
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse/parser.go.y:426
		{
			yyVAL.expr = &ast.RelationalOpExpr{Lhs: yyDollar[1].expr, Operator: ">", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetLine(yyDollar[1].expr.Line())
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse/parser.go.y:430
		{
			yyVAL.expr = &ast.RelationalOpExpr{Lhs: yyDollar[1].expr, Operator: "<", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetLine(yyDollar[1].expr.Line())
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse/parser.go.y:434
		{
			yyVAL.expr = &ast.RelationalOpExpr{Lhs: yyDollar[1].expr, Operator: ">=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetLine(yyDollar[1].expr.Line())
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse/parser.go.y:438
		{
			yyVAL.expr = &ast.RelationalOpExpr{Lhs: yyDollar[1].expr, Operator: "<=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetLine(yyDollar[1].expr.Line())
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse/parser.go.y:442
		{
			yyVAL.expr = &ast.RelationalOpExpr{Lhs: yyDollar[1].expr, Operator: "==", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetLine(yyDollar[1].expr.Line())
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse/parser.go.y:446
		{
			yyVAL.expr = &ast.RelationalOpExpr{Lhs: yyDollar[1].expr, Operator: "~=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetLine(yyDollar[1].expr.Line())
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse/parser.go.y:450
		{
			yyVAL.expr = &ast.StringConcatOpExpr{Lhs: yyDollar[1].expr, Rhs: yyDollar[3].expr}
			yyVAL.expr.SetLine(yyDollar[1].expr.Line())
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse/parser.go.y:454
		{
			yyVAL.expr = &ast.ArithmeticOpExpr{Lhs: yyDollar[1].expr, Operator: "+", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetLine(yyDollar[1].expr.Line())
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse/parser.go.y:458
		{
			yyVAL.expr = &ast.ArithmeticOpExpr{Lhs: yyDollar[1].expr, Operator: "-", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetLine(yyDollar[1].expr.Line())
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse/parser.go.y:462
		{
			yyVAL.expr = &ast.ArithmeticOpExpr{Lhs: yyDollar[1].expr, Operator: "*", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetLine(yyDollar[1].expr.Line())
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse/parser.go.y:466
		{
			yyVAL.expr = &ast.ArithmeticOpExpr{Lhs: yyDollar[1].expr, Operator: "/", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetLine(yyDollar[1].expr.Line())
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse/parser.go.y:470
		{
			yyVAL.expr = &ast.ArithmeticOpExpr{Lhs: yyDollar[1].expr, Operator: "%", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetLine(yyDollar[1].expr.Line())
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse/parser.go.y:474
		{
			yyVAL.expr = &ast.ArithmeticOpExpr{Lhs: yyDollar[1].expr, Operator: "^", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetLine(yyDollar[1].expr.Line())
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse/parser.go.y:478
		{
			yyVAL.expr = &ast.UnaryMinusOpExpr{Expr: yyDollar[2].expr}
			yyVAL.expr.SetLine(yyDollar[2].expr.Line())
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse/parser.go.y:482
		{
			yyVAL.expr = &ast.UnaryNotOpExpr{Expr: yyDollar[2].expr}
			yyVAL.expr.SetLine(yyDollar[2].expr.Line())
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse/parser.go.y:486
		{
			yyVAL.expr = &ast.UnaryLenOpExpr{Expr: yyDollar[2].expr}
			yyVAL.expr.SetLine(yyDollar[2].expr.Line())
		}
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parse/parser.go.y:490
		{
			yyVAL.expr = &ast.TypeAssertionExpr{
				Expr: yyDollar[1].expr,
				Type: yyDollar[3].expr,
			}
			yyVAL.expr.SetLine(yyDollar[1].expr.Line())
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse/parser.go.y:499
		{
			yyVAL.expr = &ast.StringExpr{Value: yyDollar[1].token.Str}
			yyVAL.expr.SetLine(yyDollar[1].token.Pos.Line)
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse/parser.go.y:505
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse/parser.go.y:508
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse/parser.go.y:511
		{ /* 新增一个分支，允许匿名函数直接作为表达式 */
			yyVAL.expr = yyDollar[1].expr
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse/parser.go.y:514
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse/parser.go.y:517
		{
			if ex, ok := yyDollar[2].expr.(*ast.Comma3Expr); ok {
				ex.AdjustRet = true
			}
			yyVAL.expr = yyDollar[2].expr
			yyVAL.expr.SetLine(yyDollar[1].token.Pos.Line)
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse/parser.go.y:526
		{
			yyDollar[2].expr.(*ast.FuncCallExpr).AdjustRet = true
			yyVAL.expr = yyDollar[2].expr
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse/parser.go.y:532
		{
			yyVAL.expr = &ast.FuncCallExpr{Func: yyDollar[1].expr, Args: yyDollar[2].exprlist}
			yyVAL.expr.SetLine(yyDollar[1].expr.Line())
		}
	case 101:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parse/parser.go.y:536
		{
			yyVAL.expr = &ast.FuncCallExpr{Method: yyDollar[3].token.Str, Receiver: yyDollar[1].expr, Args: yyDollar[4].exprlist}
			yyVAL.expr.SetLine(yyDollar[1].expr.Line())
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse/parser.go.y:542
		{
			if yylex.(*Lexer).PNewLine {
				yylex.(*Lexer).TokenError(yyDollar[1].token, "ambiguous syntax (function call x new statement)")
			}
			yyVAL.exprlist = []ast.Expr{}
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse/parser.go.y:548
		{
			if yylex.(*Lexer).PNewLine {
				yylex.(*Lexer).TokenError(yyDollar[1].token, "ambiguous syntax (function call x new statement)")
			}
			yyVAL.exprlist = yyDollar[2].exprlist
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse/parser.go.y:556
		{
			yyVAL.expr = &ast.FunctionExpr{ParList: yyDollar[2].funcexpr.ParList, Stmts: yyDollar[2].funcexpr.Stmts}
			yyVAL.expr.SetLine(yyDollar[1].token.Pos.Line)
			yyVAL.expr.SetLastLine(yyDollar[2].funcexpr.LastLine())
		}
	case 105:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parse/parser.go.y:563
		{
			yyVAL.funcexpr = &ast.FunctionExpr{ParList: yyDollar[2].parlist, Stmts: yyDollar[5].stmts}
			yyVAL.funcexpr.SetLine(yyDollar[1].token.Pos.Line)
			yyVAL.funcexpr.SetLastLine(yyDollar[6].token.Pos.Line)
		}
	case 106:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parse/parser.go.y:568
		{
			yyVAL.funcexpr = &ast.FunctionExpr{ParList: &ast.ParList{HasVargs: false, Names: []string{}}, Stmts: yyDollar[4].stmts}
			yyVAL.funcexpr.SetLine(yyDollar[1].token.Pos.Line)
			yyVAL.funcexpr.SetLastLine(yyDollar[5].token.Pos.Line)
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse/parser.go.y:575
		{
			yyVAL.parlist = &ast.ParList{HasVargs: true, Names: []string{}}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse/parser.go.y:578
		{
			yyVAL.parlist = &ast.ParList{HasVargs: false, Names: []string{}}
			yyVAL.parlist.Names = append(yyVAL.parlist.Names, yyDollar[1].namelist...)
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse/parser.go.y:582
		{
			yyVAL.parlist = &ast.ParList{HasVargs: true, Names: []string{}}
			yyVAL.parlist.Names = append(yyVAL.parlist.Names, yyDollar[1].namelist...)
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse/parser.go.y:589
		{
			yyVAL.expr = &ast.TableExpr{Fields: []*ast.Field{}}
			yyVAL.expr.SetLine(yyDollar[1].token.Pos.Line)
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse/parser.go.y:593
		{
			yyVAL.expr = &ast.TableExpr{Fields: yyDollar[2].fieldlist}
			yyVAL.expr.SetLine(yyDollar[1].token.Pos.Line)
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse/parser.go.y:600
		{
			yyVAL.fieldlist = []*ast.Field{yyDollar[1].field}
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse/parser.go.y:603
		{
			yyVAL.fieldlist = append(yyDollar[1].fieldlist, yyDollar[3].field)
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse/parser.go.y:606
		{
			yyVAL.fieldlist = yyDollar[1].fieldlist
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse/parser.go.y:611
		{
			yyVAL.field = &ast.Field{Key: &ast.StringExpr{Value: yyDollar[1].token.Str}, Value: yyDollar[3].expr}
			yyVAL.field.Key.SetLine(yyDollar[1].token.Pos.Line)
		}
	case 116:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parse/parser.go.y:615
		{
			yyVAL.field = &ast.Field{Key: yyDollar[2].expr, Value: yyDollar[5].expr}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse/parser.go.y:618
		{
			yyVAL.field = &ast.Field{Value: yyDollar[1].expr}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse/parser.go.y:623
		{
			yyVAL.fieldsep = ","
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse/parser.go.y:626
		{
			yyVAL.fieldsep = ";"
		}
	}
	goto yystack /* stack new state and value */
}
